import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns





from sklearn.datasets import fetch_california_housing  # Alternative dataset
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error





california = fetch_california_housing()
data = pd.DataFrame(california.data, columns=california.feature_names)
data['MEDV'] = california.target 





print("Missing Values:\n", data.isnull().sum())





sns.set(rc={'figure.figsize': (11.7, 8.27)})
sns.histplot(data['MEDV'], bins=30, kde=True)
plt.title("Distribution of Target Variable")
plt.show()





correlation_matrix = data.corr().round(2)
plt.figure(figsize=(10, 8))
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm')
plt.title("Feature Correlation Heatmap")
plt.show()






features = ["AveRooms", "AveOccup"]
target = data["MEDV"]





plt.figure(figsize=(10, 5))
for i, col in enumerate(features):
    plt.subplot(1, len(features), i+1)
    plt.scatter(data[col], target, marker='o')
    plt.title(f"{col} vs MEDV")
    plt.xlabel(col)
    plt.ylabel("MEDV")
    
    
    
    
    
    plt.show()
    
    
    
    
    
    X = data[["AveRooms", "AveOccup"]]
Y = data["MEDV"]






X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)






model = LinearRegression()
model.fit(X_train, Y_train)





Y_pred = model.predict(X_test)





mse = mean_squared_error(Y_test, Y_pred)
print(f"Mean Squared Error: {mse:.2f}")
